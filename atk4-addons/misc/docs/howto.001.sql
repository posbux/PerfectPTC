/* This is only a sample table! */
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `surname` varchar(255) DEFAULT NULL,
  `gender` char(1) DEFAULT 'M',
  `manager_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `manager_id_fk` (`manager_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
INSERT INTO `user` VALUES (1,'bill@microsoft.com','Bill','Gates','M',NULL),(2,'steve@apple.com','Steve','Jobs','M',NULL),(3,'sandra@mail.com','Sandra','Smith','F',1);


CREATE TABLE `doc_howto` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `inherit` varchar(255) DEFAULT NULL,
  `descr` text,
  `example` text,
  `approved` enum('Y','N') DEFAULT 'N',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doc_howto`
--

LOCK TABLES `doc_howto` WRITE;
/*!40000 ALTER TABLE `doc_howto` DISABLE KEYS */;
INSERT INTO `doc_howto` VALUES (1,'Basic Grid','grid','','Grid is one of the basic views in Agile Toolkit. It places a table on the table with headers, columns and rows. For grid each row is similarly formatted.\n\nYou call addColumn() to a grid several times to populate it with the Columns you want to see.\n\nGrid can receive data from several sources such as static source, MySQL able or Model.\n\nThis example illustrates a very basic use of Grid.','$g=$p->add(\'Grid\');\n$g->addColumn(\'name\');\n$g->addColumn(\'surname\');\n$g->setStaticSource(array(\n  array(\'name\'=>\'John\',\'surname\'=>\'Smith\'.rand(1,20)),\n  array(\'name\'=>\'Peter\',\'surname\'=>\'Tester\'.rand(20,40))\n));\n','Y'),(2,'Basic Form','form','','A very basic example on how you can create a form.','$f=$p->add(\'Form\');\n$f->addField(\'line\',\'name\');\n$f->addField(\'line\',\'surname\');\n$f->addSubmit();\nif($f->isSubmitted()){\n  $f->js()->univ()->alert(\'Thank you, \'.$f->get(\'name\').\' \'.$f->get(\'surname\'))->execute();\n}','Y'),(3,'Grid Buttons','grid, buttons, javascript','1','In many cases you would want to add buttons to your grid. Buttons are typically used for adding new elements into grid or refreshing grid contents.','$g->addButton(\'One\');\n$g->addButton(\'Two\')->js(\'click\')->univ()->alert(\'clicked button two\');\n$g->addButton(\'Reload Grid\')->js(\'click\',$g->js()->reload());\n$g->addButton(\'With Icon\')->setIcon(\'ui-icon-plus\');','Y'),(4,'Grid from Database','grid, sql, database, dsql','','In most cases, you will want to connect your grid with the database. Agile Toolkit allows you to specify data source based on table in your database, then you can adjust query dynamically.\n\nTo initialize database link you should use $g->setSource(\'table\'). This will create an object $g->dq, which you can manipulate to adjust your query.\n','$g=$p->add(\'Grid\');\n$g->addColumn(\'text\',\'gender\');\n$g->addColumn(\'text\',\'name\');\n$g->addColumn(\'text\',\'surname\');\n$g->setSource(\'user\');\n','Y'),(5,'Dynamic Grid Reloading','grid, javascript, reload','4','Agile Toolkit have a powerful way to integrate your objects with JavaScript. In this example, we are adding 2 buttons for a database grid. Each button will reload grid contents with additional argument, and that argument will be reflected on query condition.\n\nNote that dq->where() passes argument from $_GET into 2nd argument without any additional checks. Function where() includes necessary checking to prevent attacks, so it should safe to have code like this.','$g->addButton(\'Male\')->js(\'click\',$g->js()->reload(array(\'g\'=>\'M\')));\n$g->addButton(\'Female\')->js(\'click\',$g->js()->reload(array(\'g\'=>\'F\')));\n\nif($_GET[\'g\'])$g->dq->where(\'gender\',$_GET[\'g\']);\n','Y'),(6,'JavaScript Bindings','javascript, form','1','PHP Code you write with Agile Toolkit is tightly integrated with jQuery. You can use any visual object such as page, grid or button to either trigger the event or have some transformations applied on.\n\nThis example demonstrates some simple cases of JavaScript use. ','$b1=$g->addButton(\'Hide Myself\');\n$b1->js(\'click\')->hide();\n\n// Demonstrates how to make cross-references between objects\n$b2=$g->addButton(\'Hide next button\');\n$b3=$g->addButton(\'Hide prev button\');\n$b2->js(\'click\',$b3->js()->fadeOut(\'slow\'));\n$b3->js(\'click\',$b2->js()->fadeOut(\'slow\'));\n\n// Performing multiple actions\n$g->addButton(\'Show all buttons\')->js(\'click\',$b1->js(null,$b2->js(null,$b3->js()->show())->show())->show());','Y'),(7,'JavaScript Chaining','javascript','4','PHP code you write is very similar to jQuery UI code. First button in this example demonstrates classic jQuery traversal. Clicking will hide first row in a grid.\n\nWhile PHP transparency is very effective it\'s use is very limited. To add more complicated routines you can use univ() extension. Univ chain already contains many useful tools.','$g->addButton(\'Hide First Data Row\')->js(\'click\')\n  ->closest(\'.atk-grid\')\n  ->children(\'table:first\')\n  ->find(\'tbody\')\n  ->children(\':visible\')\n  ->eq(0)\n  ->hide();\n\n$g->addButton(\'univ() test1\')->js(\'click\')\n  ->univ()\n  ->confirm(\'Are you sure?\')\n  ->alert(\'Test performed\');\n','Y'),(8,'JavaScript Function Closures','javascript, closure','1','JS Chains in AgileToolkit allows you to use closures. For example - univ().dialogBox() function is a proxy into jQuery dialog() widget. It comes with default options and will automatically allocate a new div for a new dialog.\n\nIn this example, dialog is created with 2 buttons. When buttons are clicked functions are executed. Those functions are defined inside PHP, however _enclose() is used. Those functions will not be executed on js(\'click\'), but will be passed as a closures.','$g->addButton(\'Dialog Test\')->js(\'click\')\n  ->univ()\n  ->dialogBox(\n    array(\n      \'autoOpen\'=>true,\n      \'title\'=>\'Do not use dialogBox directly!\',\n      \'buttons\'=>array(\n        \'ReloadGrid\'=>$g->js()->_enclose()->reload(),\n        \'Test alert\'=>$g->js()->_enclose()->univ()->alert(\'Working!\')\n       )\n    )\n  )->html(\'yahoo\');','Y'),(9,'JavaScript and Form binding','javascript, form','2','$f->addField() returns a valid objects which also can be used with js() function. This example adds a hidden field to the form, which will be displayed only if first name is entered.','$f3=$f->addField(\'line\',\'middle_name\');\n$f3->js(true)->closest(\'dl\')->hide(); // will be hidden by default\n\n$f->getElement(\'name\')->js(\'change\',$f3->js()->closest(\'dl\')->show());','Y'),(10,'JavaScript expressions','javascript, expressions','2','Using expressions allows you to fetch data from fields easily. In this example contents of name will be copied into surname on change.','$f->getElement(\'name\')->js(\'change\',\n  $f->getElement(\'surname\')->js()->val(\n    $f->getElement(\'name\')->js()->val()\n   )\n);','Y'),(11,'Injection Protection','injection','','SQL, HTML and JS injections are the primary concerns in any web application. Agile Toolkit and the levels of abstractions it introduces are guarding against injections without any need for developer to worry.','$f=$p->add(\'Form\');\n$f->addField(\'line\',\'name\',\'Search by name\');\n$b=$f->addSubmit(\'OK\');\n\n$h=$p->add(\'View_HtmlElement\')->setElement(\'h1\')->set(\'Showing all results\');\n\nif($f->isSubmitted()){\n  // Look in database\n  $dq=$this->api->db->dsql()->table(\'user\')->field(\'count(*)\');\n  $dq->where(\'name like\',\'%\'.$f->get(\'name\').\'%\');\n  $count=$dq->do_getOne();\n\n  $f->js(null, \n    $h->js()->text(\'Performed search for \"\'.$f->get(\'name\').\'\"\')\n  )->univ()->alert($count.\' rows for: \'.$f->get(\'name\'))->execute();\n}\n\n','Y'),(12,'Selectors','javascript, selector','','Perform javascript events when page is loaded','$p->js(true)->css(array(\'border\'=>\'1px dashed red\'));','Y'),(13,'Ajaxification','ajax, javascript','','Agile Toolkit is very powerful in a way how it supports AJAX. This example will perform ajaxification of the left sidebar. This will enhance links on the sidebar to use AJAX for page loading. \n\nWhat is amazing is that any test in this demo suite will continue to perform exactly the same even if it is loaded through AJAX request. Which means - as a developer you can decide how exactly you wish to make your links operate.\n\nThis, of course, is just a tip of the iceberg and capabilities of AJAX are much more powerful than demonstrated here.','$p->add(\'Button\')->setLabel(\'Ajaxify left sidebar\')->js(\'click\',$p->js()->_selector(\'#Content\')->atk4_loader()->univ()->ajaxifyLinks())->univ()->alert(\'Next click on sidebar will load contents through AJAX\');','Y');
